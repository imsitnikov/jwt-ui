"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressKit = void 0;
const cluster_1 = __importDefault(require("cluster"));
const fs_1 = __importDefault(require("fs"));
const worker_threads_1 = require("worker_threads");
const express_1 = __importDefault(require("express"));
const base_middleware_1 = require("./base-middleware");
const parsers_1 = require("./parsers");
const router_1 = require("./router");
const DEFAULT_PORT = 3030;
class ExpressKit {
    constructor(nodekit, routes, {beforeParsers, beforeRoutes}) {
        var _a;
        this.getAppSocket = () => process.env.APP_SOCKET || this.config.appSocket;
        this.getListenTarget = (appSocket) => process.env.APP_PORT || this.config.appPort || appSocket || DEFAULT_PORT;
        this.nodekit = nodekit;
        this.config = nodekit.config;
        this.express = (0, express_1.default)();
        this.express.disable('x-powered-by');
        this.express.disable('etag');
        // https://expressjs.com/en/guide/behind-proxies.html
        this.express.set('trust proxy', (_a = this.config.expressTrustProxyNumber) !== null && _a !== void 0 ? _a : true);
        this.express.get('/__version', (_, res) => res.send({ version: this.config.appVersion }));
        (0, base_middleware_1.setupBaseMiddleware)(this.nodekit.ctx, this.express);
        if (beforeParsers) {
            beforeParsers(this.express);
        }
        (0, parsers_1.setupParsers)(this.nodekit.ctx, this.express);
        if (beforeRoutes) {
            beforeRoutes(this.express);
        }
        (0, router_1.setupRoutes)(this.nodekit.ctx, this.express, routes);
        const appSocket = this.getAppSocket();
        const listenTarget = this.getListenTarget(appSocket);
        if (appSocket &&
            listenTarget === appSocket &&
            cluster_1.default.isPrimary &&
            worker_threads_1.isMainThread &&
            fs_1.default.existsSync(appSocket)) {
            fs_1.default.unlinkSync(appSocket);
        }
    }
    run() {
        const appSocket = this.getAppSocket();
        const listenTarget = this.getListenTarget(appSocket);
        const listenTargetType = appSocket === listenTarget ? 'socket' : 'port';
        this.nodekit.ctx.log(`Listening on ${listenTargetType} ${listenTarget}`);
        this.httpServer = this.express.listen(listenTarget, () => {
            this.nodekit.ctx.log('App is running');
            if (listenTarget === appSocket) {
                fs_1.default.chmod(appSocket, 0o666, (error) => {
                    if (error instanceof Error) {
                        this.nodekit.ctx.logError('Socket manipulation error', error);
                        process.exit(1);
                    }
                });
            }
        });
        this.nodekit.addShutdownHandler(() => {
            return new Promise((resolve, reject) => {
                var _a, _b;
                (_b = (_a = this.httpServer) === null || _a === void 0 ? void 0 : _a.close) === null || _b === void 0 ? void 0 : _b.call(_a, (error) => (error ? reject(error) : resolve()));
            });
        });
    }
}
exports.ExpressKit = ExpressKit;
